<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_26) on Wed Jun 15 09:20:51 EDT 2011 -->
<TITLE>
TimeUtils
</TITLE>

<META NAME="date" CONTENT="2011-06-15">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="TimeUtils";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../gov/noaa/ncdc/crn/util/MathUtils.html" title="class in gov.noaa.ncdc.crn.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../gov/noaa/ncdc/crn/util/Version.html" title="class in gov.noaa.ncdc.crn.util"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?gov/noaa/ncdc/crn/util/TimeUtils.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="TimeUtils.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
gov.noaa.ncdc.crn.util</FONT>
<BR>
Class TimeUtils</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><B>gov.noaa.ncdc.crn.util.TimeUtils</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>TimeUtils</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#CRN_EPOCH">CRN_EPOCH</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The CRN Epoch is defined as October 4, 2000; 9:00:00 a.m.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected static&nbsp;org.apache.commons.logging.Log</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#LOGGER">LOGGER</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected static&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#MILLISECS_PER_DAY">MILLISECS_PER_DAY</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Number of leap seconds per day except on 
 days when a leap second has been inserted, e.g.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#MILLISECS_PER_HOUR">MILLISECS_PER_HOUR</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Number of milliseconds per hour, except when a leap second is inserted.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#MILLISECS_PER_MINUTE">MILLISECS_PER_MINUTE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;All minutes have this many milliseconds except the last minute of the day on a day defined with a leap second.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#TimeUtils()">TimeUtils</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#addHours(java.util.Calendar, int)">addHours</A></B>(java.util.Calendar&nbsp;cal,
         int&nbsp;hours)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new calendar and adds hours to it</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#changeTimeZone(java.util.Calendar, java.lang.String)">changeTimeZone</A></B>(java.util.Calendar&nbsp;calendar,
               java.lang.String&nbsp;timezone)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new Calendar representing the same moment in time but in a different timezone.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#computeCalendarDate(int)">computeCalendarDate</A></B>(int&nbsp;datetimeId)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Computes a Calendar from a CRN datetimeId.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#computeDateTimeId(java.util.Calendar)">computeDateTimeId</A></B>(java.util.Calendar&nbsp;calendar)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Computes a database datetimeId from a Calendar object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#convertFromUTC(java.lang.String, java.lang.String)">convertFromUTC</A></B>(java.lang.String&nbsp;yyyymmddhh,
               java.lang.String&nbsp;timeZoneID)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Converts a UTC time datestring to a datestring in a *standard* timezone.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#convertToUTC(java.lang.String, java.lang.String)">convertToUTC</A></B>(java.lang.String&nbsp;yyyymmddhh,
             java.lang.String&nbsp;timeZoneID)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Converts a *standard* time datestring in one timezone to a datestring in UTC.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#createCalendar(int, int, int, int, int, java.lang.String)">createCalendar</A></B>(int&nbsp;year,
               int&nbsp;month,
               int&nbsp;day,
               int&nbsp;hour,
               int&nbsp;minute,
               java.lang.String&nbsp;timeZoneID)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a Calendar with the referenced time values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#createCalendar(java.lang.String, java.lang.String)">createCalendar</A></B>(java.lang.String&nbsp;date,
               java.lang.String&nbsp;timeZoneID)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a Calendar representation of a date string in a time zone.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#createUTCCalendar(gov.noaa.ncdc.crn.domain.Datetime)">createUTCCalendar</A></B>(<A HREF="../../../../../gov/noaa/ncdc/crn/domain/Datetime.html" title="class in gov.noaa.ncdc.crn.domain">Datetime</A>&nbsp;datetime)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>calendar is now available in the datetime object, use datetime.getUtcCal().</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#createUTCCalendar(int, int, int)">createUTCCalendar</A></B>(int&nbsp;year,
                  int&nbsp;dayOfYear,
                  int&nbsp;hour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a UTC Calendar with the referenced time values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#createUTCCalendar(java.lang.String)">createUTCCalendar</A></B>(java.lang.String&nbsp;yyyymmddhh)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a Calendar from a YYYYMMDDHH24 String</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#daysOld(java.lang.String)">daysOld</A></B>(java.lang.String&nbsp;date)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of complete days between date and now.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#diffDays(java.util.Calendar, java.util.Calendar)">diffDays</A></B>(java.util.Calendar&nbsp;begin,
         java.util.Calendar&nbsp;end)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines the number of complete days from this date to the given end date.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#extendDate(java.util.Calendar, int, int, int, int, int)">extendDate</A></B>(java.util.Calendar&nbsp;calendar,
           int&nbsp;years,
           int&nbsp;months,
           int&nbsp;days,
           int&nbsp;hours,
           int&nbsp;minutes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new calendar which is offset by the other arguments.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getCalendar(java.lang.String)">getCalendar</A></B>(java.lang.String&nbsp;date)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a UTC Calendar represented by a String in the format yyyy[mmddhh24mi]</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getDatestring(java.sql.Date)">getDatestring</A></B>(java.sql.Date&nbsp;date)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getDatestring(java.lang.String)">getDatestring</A></B>(java.lang.String&nbsp;date)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a yyyymmddhh24mi String from a date in the format yyyy,yyyymm,yyyymmdd,yyyymmddhh24,yyyymmddhh24mi.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getMsSinceEpoch(gov.noaa.ncdc.crn.domain.Datetime)">getMsSinceEpoch</A></B>(<A HREF="../../../../../gov/noaa/ncdc/crn/domain/Datetime.html" title="class in gov.noaa.ncdc.crn.domain">Datetime</A>&nbsp;datetime)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of milliseconds since the epoch for a datetime</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getObservationDay(java.util.Calendar)">getObservationDay</A></B>(java.util.Calendar&nbsp;cal)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a String in the format YYYYMMDD of the day associated with the observation hour
 represented by Calendar argument.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getObservationDay(java.lang.String)">getObservationDay</A></B>(java.lang.String&nbsp;yyyymmddhh)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a String in the format YYYYMMDD of the day associated with the observation hour
 represented by yyyymmddhh
 For example, the observed hour 2009010100 actually represents an hour in the day 20081231, 
 since the observed hour's timestamp is the end of the last hour of that day.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getObservationMonth(java.util.Calendar)">getObservationMonth</A></B>(java.util.Calendar&nbsp;cal)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a String in the format YYYYMM of the month associated with the observation hour
 represented by cal
 For example, the observed hour 2009010100 actually represents an hour in the month 200812, 
 since the observed hour's timestamp is the end of the last hour of that month.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getObservationMonth(java.lang.String)">getObservationMonth</A></B>(java.lang.String&nbsp;yyyymmddhh)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a String in the format YYYYMM of the month associated with the observation hour
 represented by yyyymmddhh
 For example, the observed hour 2009010100 actually represents an hour in the month 200812, 
 since the observed hour's timestamp is the end of the last hour of that day.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getObservationMonthInt(java.lang.String)">getObservationMonthInt</A></B>(java.lang.String&nbsp;yyyymmddhh)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an int representing the month associated with the yyyymmddhh observation datestring.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getObservationYear(java.util.Calendar)">getObservationYear</A></B>(java.util.Calendar&nbsp;cal)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a String in the format YYYY of the year associated with the observation hour
 represented by cal
 For example, the observed hour 2009010100 actually represents an hour in the year 2008, 
 since the observed hour's timestamp is the end of the last hour of that year.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getObservationYear(java.lang.String)">getObservationYear</A></B>(java.lang.String&nbsp;yyyymmddhh)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a String in the format YYYY of the year associated with the observation hour
 represented by yyyymmddhh
 For example, the observed hour 2009010100 actually represents an hour in the year 2008, 
 since the observed hour's timestamp is the end of the last hour of that year.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getYYYYMMDD(java.util.Calendar)">getYYYYMMDD</A></B>(java.util.Calendar&nbsp;cal)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a YYYYMMDD String from a Calendar</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getYYYYMMDD(java.sql.Date)">getYYYYMMDD</A></B>(java.sql.Date&nbsp;date)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parses a yyyymmdd datestring from a java.sql.Date</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getYYYYMMDDHH24(java.util.Calendar)">getYYYYMMDDHH24</A></B>(java.util.Calendar&nbsp;cal)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a YYYYMMDDHH24 String from a Calendar</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getYYYYMMDDHH24(int, int, int)">getYYYYMMDDHH24</A></B>(int&nbsp;year,
                int&nbsp;dayOfYear,
                int&nbsp;hour)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a YYYYMMDDHH24 UTC String from the year, month, day, hour</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getYYYYMMDDHH24MI(java.util.Calendar)">getYYYYMMDDHH24MI</A></B>(java.util.Calendar&nbsp;cal)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>use getYYYYMMDDHH24mm(Calendar)</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#getYYYYMMDDHH24mm(java.util.Calendar)">getYYYYMMDDHH24mm</A></B>(java.util.Calendar&nbsp;cal)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#isCurrentMonth(java.lang.String)">isCurrentMonth</A></B>(java.lang.String&nbsp;date)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if date represents a UTC date that is within the current UTC date's month</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#isCurrentWeek(java.lang.String)">isCurrentWeek</A></B>(java.lang.String&nbsp;date)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if date represents a UTC date that is within the current UTC date's week of year</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#isCurrentYear(java.lang.String)">isCurrentYear</A></B>(java.lang.String&nbsp;date)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if date represents a UTC date that is within the current UTC date's year</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#isSameMonth(java.util.Calendar, java.util.Calendar)">isSameMonth</A></B>(java.util.Calendar&nbsp;cal1,
            java.util.Calendar&nbsp;cal2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if the two calendars are in the same month of the same year</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#isSameWeek(java.util.Calendar, java.util.Calendar)">isSameWeek</A></B>(java.util.Calendar&nbsp;cal1,
           java.util.Calendar&nbsp;cal2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if the two calendars are in the same week of the same year</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#isSameYear(java.util.Calendar, java.util.Calendar)">isSameYear</A></B>(java.util.Calendar&nbsp;cal1,
           java.util.Calendar&nbsp;cal2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if the two calendars are in the same year</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#nowLocal()">nowLocal</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a YYYYMMDDHH24MI String based on the current local time</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#nowLocalCalendar()">nowLocalCalendar</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs and retrieves a java.util.GregorianCalendar based on the current local time.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#nowUTC()">nowUTC</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a YYYYMMDDHH24MI String based on the current UTC time</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Calendar</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#nowUTCCalendar()">nowUTCCalendar</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a Calendar based on the current UTC time</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#prettyCalendarDate(gov.noaa.ncdc.crn.domain.Datetime)">prettyCalendarDate</A></B>(<A HREF="../../../../../gov/noaa/ncdc/crn/domain/Datetime.html" title="class in gov.noaa.ncdc.crn.domain">Datetime</A>&nbsp;datetime)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#prettyCalendarDate(int)">prettyCalendarDate</A></B>(int&nbsp;datetimeId)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a formatted String representation of a datetimeId.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../../gov/noaa/ncdc/crn/util/TimeUtils.html#UTCnow()">UTCnow</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="LOGGER"><!-- --></A><H3>
LOGGER</H3>
<PRE>
protected static final org.apache.commons.logging.Log <B>LOGGER</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="CRN_EPOCH"><!-- --></A><H3>
CRN_EPOCH</H3>
<PRE>
public static final long <B>CRN_EPOCH</B></PRE>
<DL>
<DD>The CRN Epoch is defined as October 4, 2000; 9:00:00 a.m. This number represents the UNIX time (milliseconds after 1/1/1970).
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../constant-values.html#gov.noaa.ncdc.crn.util.TimeUtils.CRN_EPOCH">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="MILLISECS_PER_MINUTE"><!-- --></A><H3>
MILLISECS_PER_MINUTE</H3>
<PRE>
public static final long <B>MILLISECS_PER_MINUTE</B></PRE>
<DL>
<DD>All minutes have this many milliseconds except the last minute of the day on a day defined with a leap second.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../constant-values.html#gov.noaa.ncdc.crn.util.TimeUtils.MILLISECS_PER_MINUTE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="MILLISECS_PER_HOUR"><!-- --></A><H3>
MILLISECS_PER_HOUR</H3>
<PRE>
public static final long <B>MILLISECS_PER_HOUR</B></PRE>
<DL>
<DD>Number of milliseconds per hour, except when a leap second is inserted.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../constant-values.html#gov.noaa.ncdc.crn.util.TimeUtils.MILLISECS_PER_HOUR">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="MILLISECS_PER_DAY"><!-- --></A><H3>
MILLISECS_PER_DAY</H3>
<PRE>
protected static final long <B>MILLISECS_PER_DAY</B></PRE>
<DL>
<DD>Number of leap seconds per day except on 
 <ol><li>days when a leap second has been inserted, e.g. 1999 JAN  1.</li>
 <li>Daylight-savings "spring forward" or "fall back" days.</li></ol>
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../../../constant-values.html#gov.noaa.ncdc.crn.util.TimeUtils.MILLISECS_PER_DAY">Constant Field Values</A></DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="TimeUtils()"><!-- --></A><H3>
TimeUtils</H3>
<PRE>
public <B>TimeUtils</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getYYYYMMDDHH24mm(java.util.Calendar)"><!-- --></A><H3>
getYYYYMMDDHH24mm</H3>
<PRE>
public static java.lang.String <B>getYYYYMMDDHH24mm</B>(java.util.Calendar&nbsp;cal)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getObservationDay(java.util.Calendar)"><!-- --></A><H3>
getObservationDay</H3>
<PRE>
public static java.lang.String <B>getObservationDay</B>(java.util.Calendar&nbsp;cal)</PRE>
<DL>
<DD>Returns a String in the format YYYYMMDD of the day associated with the observation hour
 represented by Calendar argument. For example, the observed hour 2009010100 actually represents 
 an hour in the day 20081231, since the observed hour's timestamp is the end of the last hour of 
 that day. This utility is useful for determining, for example, on what day a Station's period of record begins.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal</CODE> - a representation of the end of the hour being observed
<DT><B>Returns:</B><DD>String in the format YYYYMMDD of the day associated with the observation hour</DL>
</DD>
</DL>
<HR>

<A NAME="getObservationDay(java.lang.String)"><!-- --></A><H3>
getObservationDay</H3>
<PRE>
public static java.lang.String <B>getObservationDay</B>(java.lang.String&nbsp;yyyymmddhh)</PRE>
<DL>
<DD>Returns a String in the format YYYYMMDD of the day associated with the observation hour
 represented by yyyymmddhh
 For example, the observed hour 2009010100 actually represents an hour in the day 20081231, 
 since the observed hour's timestamp is the end of the last hour of that day. This utility
 is useful for determining, for example, in what day a station's period of record begins
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>yyyymmddhh</CODE> - a representation of the end of the hour being observed
<DT><B>Returns:</B><DD>String in the format YYYYMMDD of the day associated with the observation hour</DL>
</DD>
</DL>
<HR>

<A NAME="getObservationMonth(java.util.Calendar)"><!-- --></A><H3>
getObservationMonth</H3>
<PRE>
public static java.lang.String <B>getObservationMonth</B>(java.util.Calendar&nbsp;cal)</PRE>
<DL>
<DD>Returns a String in the format YYYYMM of the month associated with the observation hour
 represented by cal
 For example, the observed hour 2009010100 actually represents an hour in the month 200812, 
 since the observed hour's timestamp is the end of the last hour of that month. This utility
 is useful for determining, for example, in what month a station's period of record begins
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal</CODE> - a representation of the end of the hour being observed
<DT><B>Returns:</B><DD>String in the format YYYYMM of the month associated with the observation hour</DL>
</DD>
</DL>
<HR>

<A NAME="getObservationMonth(java.lang.String)"><!-- --></A><H3>
getObservationMonth</H3>
<PRE>
public static java.lang.String <B>getObservationMonth</B>(java.lang.String&nbsp;yyyymmddhh)</PRE>
<DL>
<DD>Returns a String in the format YYYYMM of the month associated with the observation hour
 represented by yyyymmddhh
 For example, the observed hour 2009010100 actually represents an hour in the month 200812, 
 since the observed hour's timestamp is the end of the last hour of that day. This utility
 is useful for determining, for example, in what month a station's period of record begins
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>yyyymmddhh</CODE> - a representation of the end of the hour being observed
<DT><B>Returns:</B><DD>String in the format YYYYMM of the month associated with the observation hour</DL>
</DD>
</DL>
<HR>

<A NAME="getObservationMonthInt(java.lang.String)"><!-- --></A><H3>
getObservationMonthInt</H3>
<PRE>
public static int <B>getObservationMonthInt</B>(java.lang.String&nbsp;yyyymmddhh)</PRE>
<DL>
<DD>Returns an int representing the month associated with the yyyymmddhh observation datestring. For example, the 
 hour 2009010100 actually represents an hour in the month 200812, since the observed hour's timestamp 
 is the end of the last hour of that day. This utility would return 12 in that case.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>yyyymmddhh</CODE> - a representation of the end of the hour being observed
<DT><B>Returns:</B><DD>the int month the observation occurs in (Jan=1, Feb=2, ...)</DL>
</DD>
</DL>
<HR>

<A NAME="getObservationYear(java.util.Calendar)"><!-- --></A><H3>
getObservationYear</H3>
<PRE>
public static java.lang.String <B>getObservationYear</B>(java.util.Calendar&nbsp;cal)</PRE>
<DL>
<DD>Returns a String in the format YYYY of the year associated with the observation hour
 represented by cal
 For example, the observed hour 2009010100 actually represents an hour in the year 2008, 
 since the observed hour's timestamp is the end of the last hour of that year. This utility
 is useful for determining, for example, in what year a station's period of record begins
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal</CODE> - a representation of the end of the hour being observed
<DT><B>Returns:</B><DD>String in the format YYYY of the year associated with the observation hour</DL>
</DD>
</DL>
<HR>

<A NAME="getObservationYear(java.lang.String)"><!-- --></A><H3>
getObservationYear</H3>
<PRE>
public static java.lang.String <B>getObservationYear</B>(java.lang.String&nbsp;yyyymmddhh)</PRE>
<DL>
<DD>Returns a String in the format YYYY of the year associated with the observation hour
 represented by yyyymmddhh
 For example, the observed hour 2009010100 actually represents an hour in the year 2008, 
 since the observed hour's timestamp is the end of the last hour of that year. This utility
 is useful for determining, for example, in what year a station's period of record begins
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>yyyymmddhh</CODE> - a representation of the end of the hour being observed
<DT><B>Returns:</B><DD>String in the format YYYY of the year associated with the observation hour</DL>
</DD>
</DL>
<HR>

<A NAME="getCalendar(java.lang.String)"><!-- --></A><H3>
getCalendar</H3>
<PRE>
public static java.util.Calendar <B>getCalendar</B>(java.lang.String&nbsp;date)</PRE>
<DL>
<DD>Returns a UTC Calendar represented by a String in the format yyyy[mmddhh24mi]
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>date</CODE> - (yyyy,yyyymm,yyyymmdd,yyyymmddhh24,yyyymmddhh24mi)
<DT><B>Returns:</B><DD>Calendar represented by date</DL>
</DD>
</DL>
<HR>

<A NAME="isCurrentMonth(java.lang.String)"><!-- --></A><H3>
isCurrentMonth</H3>
<PRE>
public static boolean <B>isCurrentMonth</B>(java.lang.String&nbsp;date)</PRE>
<DL>
<DD>Returns true if date represents a UTC date that is within the current UTC date's month
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>date</CODE> - YYYYMMDD-type datestring
<DT><B>Returns:</B><DD><code>true</code> if date represents a UTC date that is within the current UTC date's month</DL>
</DD>
</DL>
<HR>

<A NAME="isCurrentWeek(java.lang.String)"><!-- --></A><H3>
isCurrentWeek</H3>
<PRE>
public static boolean <B>isCurrentWeek</B>(java.lang.String&nbsp;date)</PRE>
<DL>
<DD>Returns true if date represents a UTC date that is within the current UTC date's week of year
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>date</CODE> - YYYYMMDD-type datestring
<DT><B>Returns:</B><DD><code>true</code> if date is in the current week.</DL>
</DD>
</DL>
<HR>

<A NAME="isCurrentYear(java.lang.String)"><!-- --></A><H3>
isCurrentYear</H3>
<PRE>
public static boolean <B>isCurrentYear</B>(java.lang.String&nbsp;date)</PRE>
<DL>
<DD>Returns true if date represents a UTC date that is within the current UTC date's year
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>date</CODE> - YYYYMMDD-type datestring
<DT><B>Returns:</B><DD><code>true</code> if date is in the current year.</DL>
</DD>
</DL>
<HR>

<A NAME="daysOld(java.lang.String)"><!-- --></A><H3>
daysOld</H3>
<PRE>
public static int <B>daysOld</B>(java.lang.String&nbsp;date)</PRE>
<DL>
<DD>Returns the number of complete days between date and now. Accounts for daylight sa
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>date</CODE> - The yyyy[mmddhh24mi] to consider
<DT><B>Returns:</B><DD>the number of days between date and now</DL>
</DD>
</DL>
<HR>

<A NAME="diffDays(java.util.Calendar, java.util.Calendar)"><!-- --></A><H3>
diffDays</H3>
<PRE>
public static long <B>diffDays</B>(java.util.Calendar&nbsp;begin,
                            java.util.Calendar&nbsp;end)</PRE>
<DL>
<DD><p>Determines the number of complete days from this date to the given end date. Later end dates result in positive values.
 Note this is not the same as subtracting day numbers. Just after midnight subtracted from just before
 midnight is 0 days for this method while subtracting day numbers would yields 1 day. Accounts for daylight saving time,
 so 4 AM local time - 4 AM local time the next day returns 1 whether or not there was an offset shift.</p>
 <p>This code was authored by goodhill@xmission.com. See <a href="http://www.xmission.com/~goodhill/dates/deltaDates.html">the 
 original article</a> for details and clarification.</p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>begin</CODE> - - any Calendar representing the moment of time at the beginning of the interval for calculation.<DD><CODE>end</CODE> - - any Calendar representing the moment of time at the end of the interval for calculation.
<DT><B>Returns:</B><DD>The number of complete days between begin and end</DL>
</DD>
</DL>
<HR>

<A NAME="isSameYear(java.util.Calendar, java.util.Calendar)"><!-- --></A><H3>
isSameYear</H3>
<PRE>
public static boolean <B>isSameYear</B>(java.util.Calendar&nbsp;cal1,
                                 java.util.Calendar&nbsp;cal2)</PRE>
<DL>
<DD>Returns true if the two calendars are in the same year
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal1</CODE> - - the first calendar to be compared.<DD><CODE>cal2</CODE> - - the second calendar to be compared.
<DT><B>Returns:</B><DD>true if the two calendars are in the same year</DL>
</DD>
</DL>
<HR>

<A NAME="isSameMonth(java.util.Calendar, java.util.Calendar)"><!-- --></A><H3>
isSameMonth</H3>
<PRE>
public static boolean <B>isSameMonth</B>(java.util.Calendar&nbsp;cal1,
                                  java.util.Calendar&nbsp;cal2)</PRE>
<DL>
<DD>Returns true if the two calendars are in the same month of the same year
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal1</CODE> - - the first calendar to be compared.<DD><CODE>cal2</CODE> - - the second calendar to be compared.
<DT><B>Returns:</B><DD>true if the two calendars are in the same month of the same year</DL>
</DD>
</DL>
<HR>

<A NAME="isSameWeek(java.util.Calendar, java.util.Calendar)"><!-- --></A><H3>
isSameWeek</H3>
<PRE>
public static boolean <B>isSameWeek</B>(java.util.Calendar&nbsp;cal1,
                                 java.util.Calendar&nbsp;cal2)</PRE>
<DL>
<DD>Returns true if the two calendars are in the same week of the same year
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal1</CODE> - - the first calendar to be compared.<DD><CODE>cal2</CODE> - - the second calendar to be compared.
<DT><B>Returns:</B><DD>true if the two calendars are in the same week of the same year</DL>
</DD>
</DL>
<HR>

<A NAME="getDatestring(java.lang.String)"><!-- --></A><H3>
getDatestring</H3>
<PRE>
public static java.lang.String <B>getDatestring</B>(java.lang.String&nbsp;date)</PRE>
<DL>
<DD>Returns a yyyymmddhh24mi String from a date in the format yyyy,yyyymm,yyyymmdd,yyyymmddhh24,yyyymmddhh24mi. 
 For example, when date=200801, datestring becomes 200801010000
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>date</CODE> - (yyyy,yyyymm,yyyymmdd,yyyymmddhh24,yyyymmddhh24mi)
<DT><B>Returns:</B><DD>yyyymmddhh24mi</DL>
</DD>
</DL>
<HR>

<A NAME="getYYYYMMDD(java.sql.Date)"><!-- --></A><H3>
getYYYYMMDD</H3>
<PRE>
public static java.lang.String <B>getYYYYMMDD</B>(java.sql.Date&nbsp;date)</PRE>
<DL>
<DD>Parses a yyyymmdd datestring from a java.sql.Date
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getDatestring(java.sql.Date)"><!-- --></A><H3>
getDatestring</H3>
<PRE>
<FONT SIZE="-1">@Deprecated
</FONT>public static java.lang.String <B>getDatestring</B>(java.sql.Date&nbsp;date)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getYYYYMMDDHH24MI(java.util.Calendar)"><!-- --></A><H3>
getYYYYMMDDHH24MI</H3>
<PRE>
<FONT SIZE="-1">@Deprecated
</FONT>public static java.lang.String <B>getYYYYMMDDHH24MI</B>(java.util.Calendar&nbsp;cal)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>use getYYYYMMDDHH24mm(Calendar)</I>
<P>
<DD>Creates a YYYYMMDDHH24MI String from a Calendar
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal</CODE> - The Calendar to parse
<DT><B>Returns:</B><DD>a YYYYMMDDHH24MI String</DL>
</DD>
</DL>
<HR>

<A NAME="getYYYYMMDDHH24(java.util.Calendar)"><!-- --></A><H3>
getYYYYMMDDHH24</H3>
<PRE>
public static java.lang.String <B>getYYYYMMDDHH24</B>(java.util.Calendar&nbsp;cal)</PRE>
<DL>
<DD>Creates a YYYYMMDDHH24 String from a Calendar
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal</CODE> - The Calendar to parse
<DT><B>Returns:</B><DD>a YYYYMMDDHH24 String</DL>
</DD>
</DL>
<HR>

<A NAME="getYYYYMMDDHH24(int, int, int)"><!-- --></A><H3>
getYYYYMMDDHH24</H3>
<PRE>
public static java.lang.String <B>getYYYYMMDDHH24</B>(int&nbsp;year,
                                               int&nbsp;dayOfYear,
                                               int&nbsp;hour)</PRE>
<DL>
<DD>Creates a YYYYMMDDHH24 UTC String from the year, month, day, hour
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>year</CODE> - <DD><CODE>dayOfYear</CODE> - <DD><CODE>hour</CODE> - 
<DT><B>Returns:</B><DD>a YYYYMMDDHH24 UTC String</DL>
</DD>
</DL>
<HR>

<A NAME="getYYYYMMDD(java.util.Calendar)"><!-- --></A><H3>
getYYYYMMDD</H3>
<PRE>
public static java.lang.String <B>getYYYYMMDD</B>(java.util.Calendar&nbsp;cal)</PRE>
<DL>
<DD>Creates a YYYYMMDD String from a Calendar
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal</CODE> - The Calendar to parse
<DT><B>Returns:</B><DD>a YYYYMMDD String</DL>
</DD>
</DL>
<HR>

<A NAME="createUTCCalendar(java.lang.String)"><!-- --></A><H3>
createUTCCalendar</H3>
<PRE>
public static java.util.Calendar <B>createUTCCalendar</B>(java.lang.String&nbsp;yyyymmddhh)</PRE>
<DL>
<DD>Creates a Calendar from a YYYYMMDDHH24 String
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>yyyymmddhh</CODE> - The String to parse
<DT><B>Returns:</B><DD>a Calendar created from the YYYYMMDDHH24</DL>
</DD>
</DL>
<HR>

<A NAME="createCalendar(java.lang.String, java.lang.String)"><!-- --></A><H3>
createCalendar</H3>
<PRE>
public static java.util.Calendar <B>createCalendar</B>(java.lang.String&nbsp;date,
                                                java.lang.String&nbsp;timeZoneID)</PRE>
<DL>
<DD>Creates a Calendar representation of a date string in a time zone. This will properly convert a date string in the format "2010083124" (where the hour
 can equal 24).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>date</CODE> - in the format yyyymmddhhmi, but as little as the year is required<DD><CODE>timeZoneID</CODE> - a valid java.util.Calendar time zone
<DT><B>Returns:</B><DD>Calendar equivalent of this date and time zone</DL>
</DD>
</DL>
<HR>

<A NAME="changeTimeZone(java.util.Calendar, java.lang.String)"><!-- --></A><H3>
changeTimeZone</H3>
<PRE>
public static java.util.Calendar <B>changeTimeZone</B>(java.util.Calendar&nbsp;calendar,
                                                java.lang.String&nbsp;timezone)</PRE>
<DL>
<DD>Creates a new Calendar representing the same moment in time but in a different timezone. If the timezone does not change, just
 returns the argument calendar.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>calendar</CODE> - <DD><CODE>timezone</CODE> - 
<DT><B>Returns:</B><DD>a Calendar in a differnt timezone</DL>
</DD>
</DL>
<HR>

<A NAME="addHours(java.util.Calendar, int)"><!-- --></A><H3>
addHours</H3>
<PRE>
public static java.util.Calendar <B>addHours</B>(java.util.Calendar&nbsp;cal,
                                          int&nbsp;hours)</PRE>
<DL>
<DD>Creates a new calendar and adds hours to it
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cal</CODE> - The base calendar to begin from<DD><CODE>hours</CODE> - The number of hours to add (can be negative)
<DT><B>Returns:</B><DD>a new calendar offset by hours</DL>
</DD>
</DL>
<HR>

<A NAME="nowLocal()"><!-- --></A><H3>
nowLocal</H3>
<PRE>
public static java.lang.String <B>nowLocal</B>()</PRE>
<DL>
<DD>Creates a YYYYMMDDHH24MI String based on the current local time
<P>
<DD><DL>

<DT><B>Returns:</B><DD>a YYYYMMDDHH24MI String based on the current local time</DL>
</DD>
</DL>
<HR>

<A NAME="nowLocalCalendar()"><!-- --></A><H3>
nowLocalCalendar</H3>
<PRE>
public static java.util.Calendar <B>nowLocalCalendar</B>()</PRE>
<DL>
<DD>Constructs and retrieves a java.util.GregorianCalendar based on the current local time.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Calendar based on the current local time</DL>
</DD>
</DL>
<HR>

<A NAME="UTCnow()"><!-- --></A><H3>
UTCnow</H3>
<PRE>
<FONT SIZE="-1">@Deprecated
</FONT>public static java.lang.String <B>UTCnow</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="nowUTC()"><!-- --></A><H3>
nowUTC</H3>
<PRE>
public static java.lang.String <B>nowUTC</B>()</PRE>
<DL>
<DD>Creates a YYYYMMDDHH24MI String based on the current UTC time
<P>
<DD><DL>

<DT><B>Returns:</B><DD>a YYYYMMDDHH24MI String based on the current UTC time</DL>
</DD>
</DL>
<HR>

<A NAME="nowUTCCalendar()"><!-- --></A><H3>
nowUTCCalendar</H3>
<PRE>
public static java.util.Calendar <B>nowUTCCalendar</B>()</PRE>
<DL>
<DD>Creates a Calendar based on the current UTC time
<P>
<DD><DL>

<DT><B>Returns:</B><DD>a Calendar based on the current UTC time</DL>
</DD>
</DL>
<HR>

<A NAME="createUTCCalendar(gov.noaa.ncdc.crn.domain.Datetime)"><!-- --></A><H3>
createUTCCalendar</H3>
<PRE>
<FONT SIZE="-1">@Deprecated
</FONT>public static java.util.Calendar <B>createUTCCalendar</B>(<A HREF="../../../../../gov/noaa/ncdc/crn/domain/Datetime.html" title="class in gov.noaa.ncdc.crn.domain">Datetime</A>&nbsp;datetime)</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>calendar is now available in the datetime object, use datetime.getUtcCal().</I>
<P>
<DD>Creates a Calendar in UTC time with the referenced time values. Note that month in Datetime is zero-based, as is the
 convention in Calendar.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>datetime</CODE> - The Object referencing the desired time
<DT><B>Returns:</B><DD>Calendar in UTC time with the referenced time values</DL>
</DD>
</DL>
<HR>

<A NAME="createCalendar(int, int, int, int, int, java.lang.String)"><!-- --></A><H3>
createCalendar</H3>
<PRE>
public static java.util.Calendar <B>createCalendar</B>(int&nbsp;year,
                                                int&nbsp;month,
                                                int&nbsp;day,
                                                int&nbsp;hour,
                                                int&nbsp;minute,
                                                java.lang.String&nbsp;timeZoneID)</PRE>
<DL>
<DD>Creates a Calendar with the referenced time values. Note that month must be zero-based, as is the convention in 
 Calendar. Zeroes the milliseconds.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>year</CODE> - <DD><CODE>month</CODE> - 0-based index; Jan=0, Feb=1, etc.<DD><CODE>day</CODE> - <DD><CODE>hour</CODE> - the hour of the day, from 0-24 (0 and 24 being the same hour of the day on consecutive days)<DD><CODE>minute</CODE> - <DD><CODE>timeZoneID</CODE> - The time zone to set the calendar to
<DT><B>Returns:</B><DD>Calendar with the referenced time values</DL>
</DD>
</DL>
<HR>

<A NAME="createUTCCalendar(int, int, int)"><!-- --></A><H3>
createUTCCalendar</H3>
<PRE>
public static java.util.Calendar <B>createUTCCalendar</B>(int&nbsp;year,
                                                   int&nbsp;dayOfYear,
                                                   int&nbsp;hour)</PRE>
<DL>
<DD>Creates a UTC Calendar with the referenced time values. Zeroes the minutes, seconds, and milliseconds.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>year</CODE> - <DD><CODE>dayOfYear</CODE> - day of year<DD><CODE>hour</CODE> - the hour of the day, from 0-23
<DT><B>Returns:</B><DD>UTC Calendar with the referenced time values</DL>
</DD>
</DL>
<HR>

<A NAME="extendDate(java.util.Calendar, int, int, int, int, int)"><!-- --></A><H3>
extendDate</H3>
<PRE>
public static java.util.Calendar <B>extendDate</B>(java.util.Calendar&nbsp;calendar,
                                            int&nbsp;years,
                                            int&nbsp;months,
                                            int&nbsp;days,
                                            int&nbsp;hours,
                                            int&nbsp;minutes)</PRE>
<DL>
<DD>Creates a new calendar which is offset by the other arguments.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>calendar</CODE> - The base calendar to start with<DD><CODE>years</CODE> - The number of years to offset the base calendar<DD><CODE>months</CODE> - The number of months to offset the base calendar<DD><CODE>days</CODE> - The number of days to offset the base calendar<DD><CODE>hours</CODE> - The number of hours to offset the base calendar<DD><CODE>minutes</CODE> - The number of minutes to offset the base calendar
<DT><B>Returns:</B><DD>a new offset calendar</DL>
</DD>
</DL>
<HR>

<A NAME="computeDateTimeId(java.util.Calendar)"><!-- --></A><H3>
computeDateTimeId</H3>
<PRE>
public static int <B>computeDateTimeId</B>(java.util.Calendar&nbsp;calendar)</PRE>
<DL>
<DD>Computes a database datetimeId from a Calendar object.  Does not access the database to obtain result. 
 Because datetimeIds represent hourly intervals the minutes, seconds, and milliseconds of the Calendar will be 
 discarded. The resulting integer will represent the hour period in which the calendar time occurs according to CRN.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>calendar</CODE> - The <code>Calendar</code> to compute an equivalent datetimeId for.
<DT><B>Returns:</B><DD>The id of the hour in which the calendar time occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="computeCalendarDate(int)"><!-- --></A><H3>
computeCalendarDate</H3>
<PRE>
public static java.util.Calendar <B>computeCalendarDate</B>(int&nbsp;datetimeId)</PRE>
<DL>
<DD>Computes a Calendar from a CRN datetimeId. Does not access the database to obtain result. Because datetimeIds
 represent hourly intervals the minutes, seconds, and milliseconds of the Calendar will be zero. The resulting Calendar 
 will represent the date at which the datetime occurs.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>datetimeId</CODE> - The datetimeId to compute an equivalent Calendar date for.
<DT><B>Returns:</B><DD>The calendar time for which a datetimeId occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="convertToUTC(java.lang.String, java.lang.String)"><!-- --></A><H3>
convertToUTC</H3>
<PRE>
public static java.lang.String <B>convertToUTC</B>(java.lang.String&nbsp;yyyymmddhh,
                                            java.lang.String&nbsp;timeZoneID)</PRE>
<DL>
<DD>Converts a *standard* time datestring in one timezone to a datestring in UTC. For example, US/Eastern (standard time) 
 is offset -5 hours from UTC, so convertToUTC("2009050614","US/Eastern") returns "2009050619"
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>yyyymmddhh</CODE> - in some time zone<DD><CODE>timeZoneID</CODE> - 
<DT><B>Returns:</B><DD>yyyymmddhh in UTC</DL>
</DD>
</DL>
<HR>

<A NAME="convertFromUTC(java.lang.String, java.lang.String)"><!-- --></A><H3>
convertFromUTC</H3>
<PRE>
public static java.lang.String <B>convertFromUTC</B>(java.lang.String&nbsp;yyyymmddhh,
                                              java.lang.String&nbsp;timeZoneID)</PRE>
<DL>
<DD>Converts a UTC time datestring to a datestring in a *standard* timezone.
 For example, US/Eastern (standard time) is offset -5 hours from UTC, so
 convertFromUTC("2009050619","US/Eastern") returns "2009050614"
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>yyyymmddhh</CODE> - in UTC<DD><CODE>timeZoneID</CODE> - 
<DT><B>Returns:</B><DD>yyyymmddhh in requested time zone</DL>
</DD>
</DL>
<HR>

<A NAME="getMsSinceEpoch(gov.noaa.ncdc.crn.domain.Datetime)"><!-- --></A><H3>
getMsSinceEpoch</H3>
<PRE>
public static long <B>getMsSinceEpoch</B>(<A HREF="../../../../../gov/noaa/ncdc/crn/domain/Datetime.html" title="class in gov.noaa.ncdc.crn.domain">Datetime</A>&nbsp;datetime)</PRE>
<DL>
<DD>Returns the number of milliseconds since the epoch for a datetime
<P>
<DD><DL>

<DT><B>Returns:</B><DD>milliseconds since the epoch for this Datetime.</DL>
</DD>
</DL>
<HR>

<A NAME="prettyCalendarDate(int)"><!-- --></A><H3>
prettyCalendarDate</H3>
<PRE>
public static java.lang.String <B>prettyCalendarDate</B>(int&nbsp;datetimeId)</PRE>
<DL>
<DD>Returns a formatted String representation of a datetimeId.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>datetimeId</CODE> - 
<DT><B>Returns:</B><DD>Formatted String</DL>
</DD>
</DL>
<HR>

<A NAME="prettyCalendarDate(gov.noaa.ncdc.crn.domain.Datetime)"><!-- --></A><H3>
prettyCalendarDate</H3>
<PRE>
public static java.lang.String <B>prettyCalendarDate</B>(<A HREF="../../../../../gov/noaa/ncdc/crn/domain/Datetime.html" title="class in gov.noaa.ncdc.crn.domain">Datetime</A>&nbsp;datetime)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../../gov/noaa/ncdc/crn/util/MathUtils.html" title="class in gov.noaa.ncdc.crn.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../../gov/noaa/ncdc/crn/util/Version.html" title="class in gov.noaa.ncdc.crn.util"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../../index.html?gov/noaa/ncdc/crn/util/TimeUtils.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="TimeUtils.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
